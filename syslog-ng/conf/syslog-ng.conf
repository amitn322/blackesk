@version: 3.28
@include "scl.conf"
@define remoteLogPath "/var/log/syslog-ng/$HOST.log"
@define elasticUser "syslog-ng"
@define elasticPass "O7z5qQgAUCRhn"
@define caFile "/etc/syslog-ng/certs/ca/ca.crt"
@define certFile "/etc/syslog-ng/certs/syslog01/syslog01.crt"
@define keyFile "/etc/syslog-ng/certs/syslog01/syslog01.key"

options {
    use_dns(no);
	dns-cache(no);
    keep_hostname(yes);
    perm(0604);	
    create_dirs(yes);
    ts_format(iso);
    use-uniqid(yes);
};

# Log Sources

source s_local {
        system();
        internal();
};

source s_ossec_alerts{
        udp( ip(127.0.0.1) port(5514));
};

source s_windows{
	tcp( ip(0.0.0.0) port(5515) flags(no-parse));
};

source s_network {
    tcp(ip(0.0.0.0), port(514));
    udp(ip(0.0.0.0), port(514));
    unix-stream("/var/run/syslog-ng/syslog-ng.sock");
};

template windowsLogtemplate {
    template("$(format-json)\n");
    template_escape(no);
};

#Filters
filter f_junk1 { not (program("Rhttpproxy") or program("Hostd") or program("hostd-probe") or program("clamd") or program("sfcb-vmware_raw")); };
filter f_cron { not (match("/usr/lib64/sa/sa1", value(MSG)));};
filter f_systemd { not (match("Starting User Slice of root", value(MSG)));};
filter f_systemd1 { not (match("finished 0anacron", value(MSG)))};
filter f_junk2 { not (match("/usr/sbin/sogo-tool expire-sessions", value(MSG)));};
filter f_junk3 { not (match("/usr/sbin/ntpdate pool.ntp.org", value(MSG)));};
filter f_junk4 { not (match("/data/webData/asksysadmin-mailman/cron/gate_news", value(MSG)));};
filter f_junk5 { not (match("vsanObserver.sh", value(MSG)));};
filter f_blacklist { not in-list("/etc/syslog-ng/lists/discard.list", value(MSG)); };
filter f_blacklist_programs { not in-list("/etc/syslog-ng/lists/program_blacklist.list", value(PROGRAM)); };


filter f_all { filter(f_junk1); filter(f_junk2); filter(f_junk3); filter(f_junk4); filter(f_junk5);filter(f_cron); filter(f_systemd); filter(f_systemd1); filter(f_blacklist_programs)};
filter f_clientip{ not (match("", value(clientip))); };
filter f_hasip { match(".+" value("clientip"));};


#Parsers

parser pattern_db{
        db-parser(file("/etc/syslog-ng/patterndb.d/ddwrt.xml"));
        db-parser(file("/etc/syslog-ng/patterndb.d/windows.xml"));
        db-parser(file("/etc/syslog-ng/patterndb.d/win2008.xml"));
        db-parser(file("/etc/syslog-ng/patterndb.d/win2k.xml"));
        db-parser(file("/etc/syslog-ng/patterndb.d/vmesx.xml"));
        db-parser(file("/etc/syslog-ng/patterndb.d/sshd.xml"));
        db-parser(file("/etc/syslog-ng/patterndb.d/postfix.xml"));
        db-parser(file("/etc/syslog-ng/patterndb.d/nginx.xml"));
        db-parser(file("/etc/syslog-ng/patterndb.d/cron.xml"));
        db-parser(file("/etc/syslog-ng/patterndb.d/ddwrt.xml"));
};

parser p_geoip2 {
    geoip2(
        "${clientip}",
        prefix( "geoip2." )
        database( "/etc/syslog-ng/GeoLite2-City/GeoLite2-City.mmdb" )
    );
};

parser p_windows { json-parser(prefix(".event.")); };
parser p_ossec{ json-parser();};
#feed
parser p_feed{
        add-contextual-data(selector("$clientip"), database("/etc/syslog-ng/feeds/known_ips.csv"));

};

# Rewrites
rewrite r_geoip2 {
    set("${geoip2.location.latitude},${geoip2.location.longitude}", value( "geopoint" ),  condition(not "${geoip2.location.latitude}" == ""));
    set("${geoip2.postal.code}", value( "zipcode" ),  condition(not "${geoip2.postal.code}" == ""));
    set("${geoip2.country.iso_code}", value( "isocode" ));
    set("${geoip2.country.names.en}", value( "country" ));
    set("${geoip2.city.names.en}", value( "city" ));
    set("${geoip2.subdivisions.0.names.en}", value( "state" ));
    set("${geoip2.subdivisions.0.iso_code}", value( "state-code" ));
};

rewrite r_remove_underscore {subst("^_"," ", value("MSG"), flags("global"));};


#Destinations
destination d_local {
        file("/var/log/syslog-ng/syslogng.log");
};

destination d_remote { file("`remoteLogPath`"); };

#https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.16/release-notes/templates-and-macros
#https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.25/administration-guide/33
destination d_es {
    elasticsearch-http(
        url("https://es01:9200/_bulk")
        index("syslog-ng_${YEAR}.${MONTH}.${DAY}")
		template("$(format-json --scope rfc3164 --scope nv-pairs  --key ISODATE @timestamp=${ISODATE} --exclude geoip2*)\n") 
		type("")
        workers(4)
        batch-lines(4)
        timeout(10)
		persist-name(elasticsearch-syslogng)
		user("`elasticUser`")
		password("`elasticPass`")
        tls(
            ca-file("/etc/syslog-ng/certs/ca/ca.crt")
            cert-file("/etc/syslog-ng/certs/syslog01/syslog01.crt")
            key-file("/etc/syslog-ng/certs/syslog01/syslog01.key")
            peer-verify(yes)
        )		
    );
};


destination d_es_windows {
    elasticsearch-http(
        url("http://es01:9200/_bulk")
        index("windows_${YEAR}.${MONTH}.${DAY}")
		template("$(format-json --scope dot-nv-pairs --exclude R_DATE --key ISODATE --rekey .event.* --shift 1)\n")
        time-zone("MST")
		type("")
        workers(4)
        batch-lines(16)
        timeout(10)
		persist-name(elasticsearch-syslogng-windows)
		user("syslog-ng")
		password("elastic123")
        tls(
            ca-file("/etc/syslog-ng/certs/ca/ca.crt")
            cert-file("/etc/syslog-ng/certs/syslog01/syslog01.crt")
            key-file("/etc/syslog-ng/certs/syslog01/syslog01.key")
            peer-verify(yes)
        )	
    );
};

destination d_es_ossec {
    elasticsearch-http(
        url("http://es01:9200/_bulk")
        index("wazuh-alerts-3.x-${YEAR}.${MONTH}.${DAY}")
		template("$(format-json -s all-nv-pairs -x __* -p @timestamp=$ISODATE --rekey .event.* --add-prefix events.)")
        time-zone("MST")
        workers(4)
        batch-lines(16)
        timeout(10)
		type("")
		persist-name(elasticsearch-syslogng-wazuh)
		user("`elasticUser`")
		password("`elasticPass`")
        tls(
            ca-file("/etc/syslog-ng/certs/ca/ca.crt")
            cert-file("/etc/syslog-ng/certs/syslog01/syslog01.crt")
            key-file("/etc/syslog-ng/certs/syslog01/syslog01.key")
            peer-verify(yes)
        )	    
	);
	
};

destination logfiles {
    file("/var/log/syslog-ng/$PROGRAM/$PROGRAM.log");
};

log {
  source(s_network);
  filter(f_all);
  filter(f_systemd);
  filter(f_systemd1);
  parser (pattern_db);
	if{
        filter(f_hasip);
        parser(p_feed);
		parser(p_geoip2);
        rewrite (r_geoip2);
	};
  destination(d_es);
  destination(d_local);
  flags(flow-control);
};

log {
	source(s_windows);
	parser(p_windows);
	destination(d_es_windows);
};

log {
	source(s_ossec_alerts);
	parser(p_ossec);
	destination(d_es_ossec);
	flags(flow-control);

};

log {
	source(s_local);
	parser(pattern_db);
	filter {program("syslog-ng")};
	destination(d_es);
	destination(d_local);
};

